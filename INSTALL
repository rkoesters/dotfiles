#!/bin/sh
set -e

# List of files that should not be installed.
exclude='
*.in
.git*
INSTALL*
README
'

usage () {
	echo "Usage: $0 [OPTIONS]"
	echo
	echo "Options:"
	echo "  -n, --dry-run  Do not execute commands."
	echo "  -v, --verbose  Print each command as they are executed."
	echo "  -h, --help     Display help message and exit."
}

get_full_username () {
	getent passwd $USER |
	cut -d ':' -f 5 |
	cut -d ',' -f 1
}

ask_questions() {
	FULLNAME=${FULLNAME:-$(get_full_username)}
	printf 'Full name [%s]: ' "$FULLNAME"
	read input
	if [ "$input" != "" ]; then
		FULLNAME="$input"
	fi

	EMAIL=${EMAIL:-"$USER@localhost"}
	printf 'Email address [%s]: ' "$EMAIL"
	read input
	if [ "$input" != "" ]; then
		EMAIL="$input"
	fi

	unset input
	export EMAIL FULLNAME

	# Build cache.
	env |
	grep -e EMAIL -e FULLNAME |
	sed -e 's/=/=\"/g' -e 's/$/\"/g' >./INSTALL.cache
}

# Expands environmental variables in file.
process_file () {
	env |
	sed 's/[\%]/\\&/g;s/\([^=\]*\)=\(.*\)/s%${\1}%\2%/' |
	sed -f /dev/stdin $1
}

install_dotfiles () {
	echo "$exclude" |
	rsync -a $rsync_args --exclude-from /dev/stdin . $HOME
}

# Parse arguments.
rsync_args=
while [ $# -gt 0 ]; do
	case $1 in
		-n|--dry-run)
			rsync_args="$rsync_args -n"
			;;
		-v|--verbose)
			rsync_args="$rsync_args -v"
			;;
		-h|--help)
			usage >&2
			exit 0
			;;
		*)
			echo "unknown option: $1" >&2
			usage >&2
			exit 1
			;;
	esac
	shift
done

# If we already have a cache, read it.
if [ -f ./INSTALL.cache ]; then
	. ./INSTALL.cache
fi

# Ask user for information that we should know.
ask_questions

# Process '*.in' files.
for i in $(find . -name '*.in'); do
	out="$(dirname $i)/$(basename "$i" .in)"
	process_file "$i" >"$out"
done

# Move the files into place.
install_dotfiles
